document.addEventListener("DOMContentLoaded", function () {
    const modal = document.getElementById("dodgers-wins-modal");
    const openModalBtn = document.getElementById("open-dodgers-wins-modal");
    const closeModal = document.getElementById("close-dodgers-wins-modal");
    const confirmBtn = document.getElementById("confirm-dodgers-wins");
    const winsSelect = document.getElementById("dodgers-wins-select");

    let winsCounts = {};
    
    // üéØ WebSocketÊé•Á∂ö
    const socket = new SockJS('/ws');
    const stompClient = Stomp.over(socket);

    stompClient.connect({}, function () {
        console.log("‚úÖ Dodgers ÂãùÂà©Êï∞‰∫àÊÉ≥ - WebSocket Êé•Á∂öÂÆå‰∫Ü");

        // üéØ WebSocket„ÅßÊäïÁ•®„Éá„Éº„Çø„ÇíÂèó‰ø°
        stompClient.subscribe("/topic/dodgers-wins", function (message) {
            const newVotes = JSON.parse(message.body);

            Object.keys(newVotes).forEach(winRange => {
                winsCounts[winRange] = (winsCounts[winRange] || 0) + newVotes[winRange];
            });

            updateChart();
        });

        // üéØ „Çµ„Éº„Éê„Éº„Åã„ÇâÊó¢Â≠ò„ÅÆÊäïÁ•®„Éá„Éº„Çø„ÇíÂèñÂæó
        fetch("/api/dodgers-wins")
            .then(response => response.json())
            .then(predictions => {
                predictions.forEach(pred => {
                    winsCounts[pred.winRange] = (winsCounts[pred.winRange] || 0) + 1;
                });

                updateChart();
            })
            .catch(error => console.error("API„Ç®„É©„Éº:", error));
    });

    openModalBtn.addEventListener("click", function () {
        modal.style.display = "block";
    });

    closeModal.addEventListener("click", function () {
        modal.style.display = "none";
    });

    confirmBtn.addEventListener("click", function () {
        const selectedWins = winsSelect.value;

        if (!selectedWins) {
            alert("ÂãùÂà©Êï∞„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ");
            return;
        }

        // üéØ WebSocket & API„Åß„Çµ„Éº„Éê„Éº„Å´ÊäïÁ•®„Éá„Éº„Çø„ÇíÈÄÅ‰ø°
        const voteData = { "wins": selectedWins };

        stompClient.send("/app/dodgers-wins-vote", {}, JSON.stringify(voteData));

        fetch("/api/dodgers-wins", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                predictionType: "DODGERS_WINS",  // ‚úÖ ËøΩÂä†
                winRange: selectedWins,
                userId: "guest",
                sessionId: sessionStorage.getItem("sessionId") || "anonymous"
            })
        })
        .then(response => response.json())
        .then(data => console.log("API„É¨„Çπ„Éù„É≥„Çπ:", data))
        .catch(error => console.error("API„Ç®„É©„Éº:", error));

        modal.style.display = "none";
    });

// üéØ ÂãùÂà©Êï∞ÂÜÜ„Ç∞„É©„Éï„ÇíÊõ¥Êñ∞
function updateChart() {
    const ctx = document.getElementById("dodgers-wins-chart").getContext("2d");

    if (window.dodgersWinsChart) {
        window.dodgersWinsChart.destroy();
    }

    const winRanges = ["50", "60", "70", "80", "90", "100"];
    const colors = ["blue", "green", "orange", "red", "gold", "purple"];
    const winVotes = winRanges.map(range => winsCounts[range] || 0);
    const totalVotes = winVotes.reduce((sum, value) => sum + value, 0);

    window.dodgersWinsChart = new Chart(ctx, {
        type: "pie",
        data: {
            labels: ["50WÂè∞", "60WÂè∞", "70WÂè∞", "80WÂè∞", "90WÂè∞", "100W‰ª•‰∏ä"],
            datasets: [{
                data: winVotes,
                backgroundColor: colors,
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { 
                    position: "bottom",
                    labels: {
                        color: "black", // üéØ ‚úÖ Âá°‰æã„ÅÆ„Éï„Ç©„É≥„Éà„ÇíÈªí„Å´Ë®≠ÂÆö
                        font: {
                            size: 9, // üéØ Â∞ë„ÅóÂ§ß„Åç„ÇÅ„Å´Ë™øÊï¥
                            weight: "bold"
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function (tooltipItem) {
                            const value = winVotes[tooltipItem.dataIndex];
                            const percentage = totalVotes > 0 ? ((value / totalVotes) * 100).toFixed(1) + "%" : "0%";
                            return ` ${tooltipItem.label}: ${percentage}`;
                        }
                    }
                },
                datalabels: {
                    color: "black", // üéØ ‚úÖ „Ç∞„É©„ÉïÂÜÖ„ÅÆ%Ë°®Á§∫„ÅÆ„Éï„Ç©„É≥„Éà„ÇíÈªí„Å´Â§âÊõ¥
                    font: {
                        weight: "bold",
                        size: 14
                    },
                    formatter: function (value, context) {
                        const percentage = totalVotes > 0 ? ((value / totalVotes) * 100).toFixed(1) + "%" : "";
                        return percentage;
                    }
                }
            }
        },
        plugins: [ChartDataLabels] // üéØ „Éá„Éº„Çø„É©„Éô„É´„ÇíÈÅ©Áî®
    });
}

    // üéØ „Ç´„Çπ„Çø„É†Âá°‰æã„Çí‰ΩúÊàê
    const legendContainer = document.getElementById("custom-legend");
    legendContainer.innerHTML = winRanges.map((range, index) =>
        `<div style="display: flex; align-items: center; font-size: 10px; margin: 2px 0;">
            <span style="width: 10px; height: 10px; background-color: ${colors[index]}; display: inline-block; margin-right: 5px;"></span>
            ${range}WÂè∞
        </div>`
    ).join("");
}
);
